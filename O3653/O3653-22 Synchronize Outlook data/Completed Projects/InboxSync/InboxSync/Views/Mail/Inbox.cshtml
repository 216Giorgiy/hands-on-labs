@model PagedList.IPagedList<InboxSync.Models.Message>
@using PagedList.Mvc;

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
  ViewBag.Title = "Inbox";
}

<h2>Inbox</h2>
<p>
    @using (Html.BeginForm("SyncInbox", "Mail", FormMethod.Post, new { @class = "sync-form" }))
    {
    <input type="submit" value="Sync Now" class="btn btn-primary btn-sm" />
    }
    @using (Html.BeginForm("ResetSyncState", "Mail", FormMethod.Post, new { @class = "sync-form" }))
    {
    <input type="submit" value="Reset Sync State" class="btn btn-primary btn-sm" onclick="return confirm('Are you sure you want to reset your sync state and remove all of your messages from the database?');" />
    }
    <input type="hidden" id="user-id" value="@ViewBag.UserId" />
    @using (Html.BeginForm("Subscribe", "Mail", FormMethod.Post, new { @class = "sync-form" }))
    {
        if (ViewBag.IsSubscribed)
        {
        <input type="submit" value="Subscribe for updates" class="btn btn-primary btn-sm" disabled />
        }
        else
        {
        <input type="submit" value="Subscribe for updates" class="btn btn-primary btn-sm" />
        }
    }
    @using (Html.BeginForm("Unsubscribe", "Mail"))
    {
        if (ViewBag.IsSubscribed)
        {
        <input type="submit" value="Unsubscribe for updates" class="btn btn-primary btn-sm" />
        }
        else
        {
        <input type="submit" value="Unsubscribe for updates" class="btn btn-primary btn-sm" disabled />
        }
    }
</p>

<table class="table">
    <tr>
        <th>
            From
        </th>
        <th>
            Subject
        </th>
        <th>
            Body Preview
        </th>
        <th>
            Received
        </th>
        <th>
            Is Read?
        </th>
    </tr>

    @foreach (var item in Model)
    {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.From.EmailAddress.Name) <strong>&lt;</strong>@Html.DisplayFor(modelItem => item.From.EmailAddress.Address)<strong>&gt;</strong>
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Subject)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.BodyPreview)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ReceivedDateTime)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.IsRead)
        </td>
    </tr>
    }

</table>
<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Inbox", new { page }))

@section scripts {
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <script>
       $(function () {
           // Reference the auto-generated proxy for the hub.
           var notif = $.connection.notificationHub;
           // Create a function that the hub can call back to display messages.
           notif.client.refreshInboxPage = function () {
               location.reload();
           };

           // Start the connection.
           $.connection.hub.start().done(function () {
               notif.server.registerUserConnection($('#user-id').val());
           });
       });
    </script>
}